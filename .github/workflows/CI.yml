name: Rust Tree Python

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux:
    # if: "startsWith(github.ref, 'refs/tags/v')"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
        target: [x86_64, aarch64, armv7, s390x, ppc64le, ppc64, i686]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
          
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: tree_py
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto

      - name: List directory contents
        run: ls

      - name: List tree_py directory contents
        run: ls tree_py 

      - name: List tree_py/dist directory contents
        run: ls tree_py/dist

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}
          path: tree_py/dist/*.whl
  
  windows:
    if: "startsWith(github.ref, 'refs/tags/v')"
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        python-version: [3.9]
        platform:
          - runner: windows-latest
            target: x86
          - runner: windows-latest
            target: x64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.platform.target }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: tree_py
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'

      - name: List dist directory contents
        run: dir tree_py\dist

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: tree_py\dist\*.whl

  macos:
        # if: "startsWith(github.ref, 'refs/tags/v')"
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        python-version: [3.9]
        platform:
          - runner: macos-latest
            target: aarch64
          - runner: macos-latest
            target: x86_64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: tree_py  # Adjust this if your Cargo.toml is in a different directory
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'

      - name: List dist directory contents
        run: ls -la tree_py/dist

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: tree_py/dist/*.whl

  release:
    permissions:
      id-token: write
      contents: write
    name: Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        artifact:
          - wheels-macos-aarch64
          - wheels-macos-x86_64
          - wheels-windows-x86
          - wheels-windows-x64
          - wheels-linux-x86_64
          - wheels-linux-i686
          - wheels-linux-aarch64
          - wheels-linux-armv7
          - wheels-linux-s390x
          - wheels-linux-ppc64le
          - wheels-linux-ppc64
    needs:
      - macos
      - windows
      - linux
    if: "startsWith(github.ref, 'refs/tags/v')"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Create dist directory
        run: mkdir -p dist

      - name: Download and unzip artifacts
        run: |
          artifacts=(
            "wheels-macos-aarch64"
            "wheels-macos-x86_64"
            "wheels-windows-x86"
            "wheels-windows-x64"
            "wheels-linux-x86_64"
            "wheels-linux-i686"
            "wheels-linux-aarch64"
            "wheels-linux-armv7"
            "wheels-linux-s390x"
            "wheels-linux-ppc64le"
            "wheels-linux-ppc64"
          )
          for artifact in "${artifacts[@]}"; do
            echo "Downloading $artifact"
            gh run download ${{ github.run_id }} --name "$artifact" --dir dist
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: List /dist directory contents
        run: ls dist

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'  # Use a Python version compatible with twine
  
      - name: Install twine
        run: pip install twine
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN_ALL }}
        run: |
          twine check dist/*
          twine upload --skip-existing dist/*